import static java.lang.System.*;

public class Main {
    public static void main(String[] args) {
        int[] arr = {2,4,5,6,7,9};
        int target = 4;
        int ans = binarySearch(arr,target);
        out.println(ans);

    }
    static int binarySearch(int[] arr, int target){
        //find the middle element
        int start = 0;
        int end = arr.length - 1;
        //asc array
        while(start<=end){
            int mid = start + (end-start) / 2;

            if(target<arr[mid]){
                end = mid-1;
            }
            else if(target > arr[mid]){
                start = mid+1;
            }
            else{
                return mid;
            }

        }
        return -1;
    }



    }
    
    
    
    //leetcode 
    1.ceiling
    package com.company;

public class Main {
    public static void main(String[] args){
        int[] arr= {2,3,5,9,14,16,18};
        int target = 15;
        int ans = ceiling(arr,target);
        System.out.println(ans);
    }

    static int ceiling(int[] arr, int target){
        int start= 0;
        int end = arr.length -1;
        while(start<=end){
            int mid = start + (end-start) / 2;
            if(target<arr[mid]){
                end = mid - 1;

            }
            else if(target>arr[mid]){
                start = mid + 1;
            }
            else{
                return mid;
            }
        }
        return start;

    }


}


//2.floor binary search
package com.company;

public class Main {
    public static void main(String[] args){
        int[] arr= {2,3,5,9,14,16,18};
        int target = 15;
        int ans = floor(arr,target);
        System.out.println(ans);
    }

    static int floor(int[] arr, int target){
        int start= 0;
        int end = arr.length -1;
        while(start<=end){
            int mid = start + (end-start) / 2;
            if(target<arr[mid]){
                end = mid - 1;

            }
            else if(target>arr[mid]){
                start = mid + 1;
            }
            else{
                return mid;
            }
        }
        return end;

    }


}
